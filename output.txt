<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Reconhecimento de Emo√ß√µes Faciais</title>
    <script src="https://cdn.jsdelivr.net/npm/@tensorflow/tfjs@3.11.0/dist/tf.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/face-api.js@0.22.2/dist/face-api.min.js"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        }
        
        body {
            background: linear-gradient(135deg, #1a2a6c, #b21f1f, #1a2a6c);
            min-height: 100vh;
            display: flex;
            flex-direction: column;
            align-items: center;
            padding: 20px;
            color: white;
        }
        
        header {
            text-align: center;
            margin-bottom: 30px;
            width: 100%;
            max-width: 800px;
        }
        
        h1 {
            font-size: 2.5rem;
            margin-bottom: 10px;
            text-shadow: 0 2px 4px rgba(0,0,0,0.3);
        }
        
        .subtitle {
            font-size: 1.2rem;
            opacity: 0.9;
            margin-bottom: 20px;
        }
        
        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            width: 100%;
            max-width: 800px;
        }
        
        .video-container {
            position: relative;
            width: 100%;
            max-width: 640px;
            margin-bottom: 20px;
        }
        
        #video {
            width: 100%;
            height: auto;
            border-radius: 10px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.3);
            background: #000;
        }
        
        #canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }
        
        .controls {
            display: flex;
            gap: 15px;
            margin-bottom: 20px;
        }
        
        button {
            background: rgba(255,255,255,0.2);
            border: 2px solid rgba(255,255,255,0.3);
            color: white;
            padding: 12px 25px;
            border-radius: 50px;
            font-size: 1rem;
            cursor: pointer;
            transition: all 0.3s ease;
            backdrop-filter: blur(10px);
        }
        
        button:hover {
            background: rgba(255,255,255,0.3);
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }
        
        button:disabled {
            opacity: 0.5;
            cursor: not-allowed;
            transform: none;
        }
        
        .status {
            background: rgba(0,0,0,0.3);
            padding: 15px 25px;
            border-radius: 10px;
            text-align: center;
            font-size: 1.1rem;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.1);
            width: 100%;
            max-width: 640px;
        }
        
        .emotion-display {
            font-size: 1.5rem;
            font-weight: bold;
            margin-top: 10px;
            min-height: 2rem;
        }
        
        .stats-container {
            background: rgba(0,0,0,0.3);
            padding: 20px;
            border-radius: 10px;
            width: 100%;
            max-width: 640px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.1);
        }
        
        .stats-title {
            text-align: center;
            margin-bottom: 15px;
            font-size: 1.3rem;
        }
        
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
            gap: 15px;
        }
        
        .stat-item {
            background: rgba(255,255,255,0.1);
            padding: 15px;
            border-radius: 8px;
            text-align: center;
            transition: transform 0.2s ease;
        }
        
        .stat-item:hover {
            transform: scale(1.05);
        }
        
        .stat-value {
            font-size: 1.8rem;
            font-weight: bold;
            margin: 5px 0;
        }
        
        .stat-label {
            font-size: 0.9rem;
            opacity: 0.8;
        }
        
        .loading {
            display: flex;
            flex-direction: column;
            align-items: center;
            gap: 20px;
            padding: 40px;
        }
        
        .spinner {
            width: 50px;
            height: 50px;
            border: 5px solid rgba(255,255,255,0.3);
            border-top: 5px solid white;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .instructions {
            background: rgba(0,0,0,0.3);
            padding: 20px;
            border-radius: 10px;
            margin-top: 20px;
            max-width: 640px;
            backdrop-filter: blur(10px);
            border: 1px solid rgba(255,255,255,0.1);
        }
        
        .instructions h3 {
            margin-bottom: 10px;
            text-align: center;
        }
        
        .instructions ul {
            padding-left: 20px;
        }
        
        .instructions li {
            margin-bottom: 8px;
        }
        
        @media (max-width: 650px) {
            h1 {
                font-size: 2rem;
            }
            
            .subtitle {
                font-size: 1rem;
            }
            
            .controls {
                flex-direction: column;
                align-items: center;
            }
            
            button {
                width: 100%;
                max-width: 300px;
            }
        }
    </style>
</head>
<body>
    <header>
        <h1>üß† Reconhecimento de Emo√ß√µes Faciais</h1>
        <p class="subtitle">Detecte express√µes faciais em tempo real usando intelig√™ncia artificial</p>
    </header>
    
    <div class="container">
        <div class="video-container">
            <video id="video" autoplay muted playsinline></video>
            <canvas id="canvas"></canvas>
        </div>
        
        <div class="controls">
            <button id="startBtn">Iniciar Detec√ß√£o</button>
            <button id="stopBtn" disabled>Parar Detec√ß√£o</button>
        </div>
        
        <div class="status">
            <div id="statusText">Clique em "Iniciar Detec√ß√£o" para come√ßar</div>
            <div class="emotion-display" id="emotionDisplay"></div>
        </div>
        
        <div class="stats-container">
            <h3 class="stats-title">üìä Estat√≠sticas de Emo√ß√µes</h3>
            <div class="stats-grid" id="statsGrid">
                <div class="stat-item">
                    <div class="stat-value" id="happyCount">0</div>
                    <div class="stat-label">üòä Feliz</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="sadCount">0</div>
                    <div class="stat-label">üò¢ Triste</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="angryCount">0</div>
                    <div class="stat-label">üò† Bravo</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="surprisedCount">0</div>
                    <div class="stat-label">üòÆ Surpreso</div>
                </div>
                <div class="stat-item">
                    <div class="stat-value" id="neutralCount">0</div>
                    <div class="stat-label">üòê Neutro</div>
                </div>
            </div>
        </div>
    </div>
    
    <div class="instructions">
        <h3>‚ÑπÔ∏è Instru√ß√µes</h3>
        <ul>
            <li>Certifique-se de permitir o acesso √† c√¢mera quando solicitado</li>
            <li>Posicione seu rosto bem iluminado na frente da c√¢mera</li>
            <li>O sistema detectar√° sua express√£o facial em tempo real</li>
            <li>As estat√≠sticas s√£o atualizadas conforme as emo√ß√µes s√£o detectadas</li>
        </ul>
    </div>

    <script>
        // Elementos do DOM
        const video = document.getElementById('video');
        const canvas = document.getElementById('canvas');
        const ctx = canvas.getContext('2d');
        const startBtn = document.getElementById('startBtn');
        const stopBtn = document.getElementById('stopBtn');
        const statusText = document.getElementById('statusText');
        const emotionDisplay = document.getElementById('emotionDisplay');
        
        // Elementos de estat√≠sticas
        const stats = {
            happy: 0,
            sad: 0,
            angry: 0,
            surprised: 0,
            neutral: 0
        };
        
        const statElements = {
            happy: document.getElementById('happyCount'),
            sad: document.getElementById('sadCount'),
            angry: document.getElementById('angryCount'),
            surprised: document.getElementById('surprisedCount'),
            neutral: document.getElementById('neutralCount')
        };
        
        // Estado da aplica√ß√£o
        let isDetecting = false;
        let detectionInterval;
        
        // Mapeamento de emo√ß√µes para emojis
        const emotionEmojis = {
            happy: 'üòä',
            sad: 'üò¢',
            angry: 'üò†',
            surprised: 'üòÆ',
            neutral: 'üòê'
        };
        
        // Inicializa√ß√£o dos modelos
        async function loadModels() {
            statusText.textContent = 'Carregando modelos...';
            startBtn.disabled = true;
            
            try {
                // Carregar modelos do face-api.js
                await faceapi.nets.tinyFaceDetector.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights');
                await faceapi.nets.faceLandmark68Net.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights');
                await faceapi.nets.faceRecognitionNet.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights');
                await faceapi.nets.faceExpressionNet.loadFromUri('https://raw.githubusercontent.com/justadudewhohacks/face-api.js/master/weights');
                
                statusText.textContent = 'Modelos carregados! Clique em "Iniciar Detec√ß√£o"';
                startBtn.disabled = false;
            } catch (error) {
                console.error('Erro ao carregar modelos:', error);
                statusText.textContent = 'Erro ao carregar modelos. Verifique sua conex√£o.';
            }
        }
        
        // Acesso √† c√¢mera
        async function startVideo() {
            try {
                const stream = await navigator.mediaDevices.getUserMedia({ 
                    video: { 
                        width: { ideal: 640 },
                        height: { ideal: 480 },
                        facingMode: 'user'
                    }, 
                    audio: false 
                });
                video.srcObject = stream;
                return true;
            } catch (err) {
                console.error('Erro ao acessar a c√¢mera:', err);
                statusText.textContent = 'Erro ao acessar a c√¢mera. Verifique as permiss√µes.';
                return false;
            }
        }
        
        // Atualizar estat√≠sticas
        function updateStats(emotion) {
            if (stats.hasOwnProperty(emotion)) {
                stats[emotion]++;
                statElements[emotion].textContent = stats[emotion];
            }
        }
        
        // Detectar emo√ß√µes
        async function detectEmotion() {
            if (!isDetecting) return;
            
            try {
                // Detectar rostos e express√µes
                const detections = await faceapi.detectAllFaces(
                    video, 
                    new faceapi.TinyFaceDetectorOptions()
                ).withFaceLandmarks().withFaceExpressions();
                
                // Limpar canvas
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                
                // Desenhar detec√ß√µes e mostrar emo√ß√£o
                if (detections.length > 0) {
                    // Redimensionar detec√ß√µes para o tamanho do canvas
                    const resizedDetections = faceapi.resizeResults(detections, {
                        width: canvas.width,
                        height: canvas.height
                    });
                    
                    // Desenhar caixas ao redor dos rostos
                    faceapi.draw.drawDetections(canvas, resizedDetections);
                    faceapi.draw.drawFaceLandmarks(canvas, resizedDetections);
                    
                    // Obter a emo√ß√£o mais prov√°vel
                    const expressions = resizedDetections[0].expressions;
                    let maxEmotion = 'neutral';
                    let maxValue = 0;
                    
                    for (const [emotion, value] of Object.entries(expressions)) {
                        if (value > maxValue) {
                            maxValue = value;
                            maxEmotion = emotion;
                        }
                    }
                    
                    // Mostrar emo√ß√£o
                    const emotionText = `${emotionEmojis[maxEmotion]} ${maxEmotion.charAt(0).toUpperCase() + maxEmotion.slice(1)}`;
                    emotionDisplay.textContent = emotionText;
                    
                    // Atualizar estat√≠sticas
                    updateStats(maxEmotion);
                } else {
                    emotionDisplay.textContent = 'Nenhum rosto detectado';
                }
            } catch (error) {
                console.error('Erro na detec√ß√£o:', error);
            }
        }
        
        // Iniciar detec√ß√£o
        async function startDetection() {
            statusText.textContent = 'Iniciando detec√ß√£o...';
            
            const streamStarted = await startVideo();
            if (!streamStarted) return;
            
            // Aguardar o v√≠deo carregar
            video.addEventListener('loadeddata', () => {
                // Ajustar tamanho do canvas
                canvas.width = video.videoWidth;
                canvas.height = video.videoHeight;
                
                isDetecting = true;
                startBtn.disabled = true;
                stopBtn.disabled = false;
                statusText.textContent = 'Detectando emo√ß√µes em tempo real...';
                
                // Iniciar detec√ß√£o cont√≠nua
                detectionInterval = setInterval(detectEmotion, 100);
            }, { once: true });
        }
        
        // Parar detec√ß√£o
        function stopDetection() {
            isDetecting = false;
            clearInterval(detectionInterval);
            startBtn.disabled = false;
            stopBtn.disabled = true;
            statusText.textContent = 'Detec√ß√£o parada';
            emotionDisplay.textContent = '';
            ctx.clearRect(0, 0, canvas.width, canvas.height);
        }
        
        // Eventos dos bot√µes
        startBtn.addEventListener('click', startDetection);
        stopBtn.addEventListener('click', stopDetection);
        
        // Inicializar quando a p√°gina carregar
        window.addEventListener('DOMContentLoaded', () => {
            // Verificar suporte a getUserMedia
            if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {
                loadModels();
            } else {
                statusText.textContent = 'Seu navegador n√£o suporta acesso √† c√¢mera.';
            }
        });
    </script>
</body>
</html>